/**
 * Tests for TODO management tool functionality
 */

import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';
import { unlinkSync, existsSync } from 'fs';
import { join } from 'path';
import { tmpdir } from 'os';

// Mock fs/promises
jest.unstable_mockModule('fs/promises', () => ({
  readFile: jest.fn(),
  writeFile: jest.fn(),
}));

describe('TODO Management Tool', () => {
  let mockFs: any;
  let testTodoPath: string;
  let testContent: string;

  beforeEach(async () => {
    jest.clearAllMocks();
    
    // Get mocked fs/promises
    mockFs = await import('fs/promises');
    
    // Set up test file path
    testTodoPath = join(tmpdir(), `test-todo-${Date.now()}.md`);
    
    // Sample TODO content for testing
    testContent = `# Test TODO

**Last Updated**: 2024-01-01
**Progress**: 2/4 tasks completed (50%)

## Implementation Tasks

- [x] ✅ Completed task (high priority) @john
- [ ] ⏳ Pending task (medium priority) @jane
  > This task has notes
- [ ] 🔄 In progress task (low priority)
- [ ] 🚫 Blocked task

## Testing Tasks

- [ ] ⏳ Write unit tests
- [ ] ⏳ Write integration tests
`;
  });

  afterEach(() => {
    jest.restoreAllMocks();
    
    // Clean up test files
    if (existsSync(testTodoPath)) {
      try {
        unlinkSync(testTodoPath);
      } catch (error) {
        // Ignore cleanup errors
      }
    }
  });

  describe('parseTodoFile', () => {
    it('should parse TODO.md file correctly', async () => {
      // Mock fs.readFile to return test content
      mockFs.readFile.mockResolvedValue(testContent);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      // Test analyze_progress operation which internally parses the file
      const result = await manageTodo({
        operation: 'analyze_progress',
        todoPath: testTodoPath,
        timeframe: 'week',
        includeVelocity: true
      });
      
      expect(mockFs.readFile).toHaveBeenCalledWith(testTodoPath, 'utf-8');
      expect(result.content[0].text).toContain('Completion Rate');
      expect(result.content[0].text).toContain('Status Distribution');
    });

    it('should handle non-existent TODO file gracefully', async () => {
      // Mock fs.readFile to throw ENOENT error
      const error = new Error('ENOENT: no such file or directory');
      (error as any).code = 'ENOENT';
      mockFs.readFile.mockRejectedValue(error);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'analyze_progress',
        todoPath: testTodoPath,
        timeframe: 'week',
        includeVelocity: true
      });
      
      // Should return analysis for empty structure
      expect(result.content[0].text).toContain('0.0% (0/0)');
    });
  });

  describe('update_status operation', () => {
    it('should update task statuses correctly', async () => {
      mockFs.readFile.mockResolvedValue(testContent);
      mockFs.writeFile.mockResolvedValue(undefined);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'update_status',
        todoPath: testTodoPath,
        updates: [
          {
            taskId: 'task-2',
            status: 'completed',
            notes: 'Finished testing'
          }
        ]
      });
      
      expect(mockFs.readFile).toHaveBeenCalledWith(testTodoPath, 'utf-8');
      expect(mockFs.writeFile).toHaveBeenCalledWith(
        testTodoPath,
        expect.stringMatching(/Generated by MCP ADR Analysis Server/),
        'utf-8'
      );
      expect(result.content[0].text).toContain('Updates Applied');
      expect(result.content[0].text).toContain('task-2');
      expect(result.content[0].text).toContain('completed');
    });

    it('should handle invalid task IDs gracefully', async () => {
      mockFs.readFile.mockResolvedValue(testContent);
      mockFs.writeFile.mockResolvedValue(undefined);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'update_status',
        todoPath: testTodoPath,
        updates: [
          {
            taskId: 'non-existent-task',
            status: 'completed'
          }
        ]
      });
      
      // Should still succeed but not update anything
      expect(result.content[0].text).toContain('Task Status Updated');
    });
  });

  describe('add_tasks operation', () => {
    it('should add new tasks to existing TODO', async () => {
      mockFs.readFile.mockResolvedValue(testContent);
      mockFs.writeFile.mockResolvedValue(undefined);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'add_tasks',
        todoPath: testTodoPath,
        section: 'New Features',
        tasks: [
          {
            title: 'Implement feature X',
            status: 'pending',
            priority: 'high',
            assignee: 'alice'
          },
          {
            title: 'Add feature Y',
            status: 'in_progress',
            priority: 'medium',
            category: 'development'
          }
        ]
      });
      
      expect(mockFs.readFile).toHaveBeenCalledWith(testTodoPath, 'utf-8');
      expect(mockFs.writeFile).toHaveBeenCalled();
      expect(result.content[0].text).toContain('Tasks Added Successfully');
      expect(result.content[0].text).toContain('Added 2 New Tasks');
      expect(result.content[0].text).toContain('Implement feature X');
      expect(result.content[0].text).toContain('Section: New Features');
    });

    it('should add tasks to General Tasks section by default', async () => {
      mockFs.readFile.mockResolvedValue('# Empty TODO\n');
      mockFs.writeFile.mockResolvedValue(undefined);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'add_tasks',
        todoPath: testTodoPath,
        tasks: [
          {
            title: 'Default section task',
            status: 'pending'
          }
        ]
      });
      
      expect(result.content[0].text).toContain('Section: General Tasks');
    });
  });

  describe('analyze_progress operation', () => {
    it('should provide comprehensive progress analysis', async () => {
      mockFs.readFile.mockResolvedValue(testContent);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'analyze_progress',
        todoPath: testTodoPath,
        timeframe: 'month',
        includeVelocity: true
      });
      
      expect(result.content[0].text).toContain('TODO Progress Analysis');
      expect(result.content[0].text).toContain('Overall Progress');
      expect(result.content[0].text).toContain('Status Distribution');
      expect(result.content[0].text).toContain('Velocity Metrics');
      expect(result.content[0].text).toContain('Recommendations');
      expect(result.content[0].text).toContain('Analysis timeframe: month');
    });

    it('should exclude velocity metrics when disabled', async () => {
      mockFs.readFile.mockResolvedValue(testContent);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'analyze_progress',
        todoPath: testTodoPath,
        timeframe: 'week',
        includeVelocity: false
      });
      
      expect(result.content[0].text).not.toContain('Velocity Metrics');
    });
  });

  describe('merge_adr_updates operation', () => {
    it('should provide merge analysis placeholder', async () => {
      mockFs.readFile.mockResolvedValue(testContent);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'merge_adr_updates',
        todoPath: testTodoPath,
        adrDirectory: 'docs/adrs',
        preserveCompleted: true,
        preserveCustom: true
      });
      
      expect(result.content[0].text).toContain('ADR Merge Analysis');
      expect(result.content[0].text).toContain('Current TODO Status');
      expect(result.content[0].text).toContain('Preserve Completed: true');
      expect(result.content[0].text).toContain('Preserve Custom: true');
    });
  });

  describe('sync_progress operation', () => {
    it('should provide sync analysis placeholder', async () => {
      mockFs.readFile.mockResolvedValue(testContent);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'sync_progress',
        todoPath: testTodoPath,
        adrDirectory: 'docs/adrs',
        updateAdrs: false
      });
      
      expect(result.content[0].text).toContain('TODO Progress Sync');
      expect(result.content[0].text).toContain('Current Status');
      expect(result.content[0].text).toContain('Update ADRs: false');
    });
  });

  describe('Error handling', () => {
    it('should throw McpAdrError for invalid operation', async () => {
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      await expect(manageTodo({
        operation: 'invalid_operation' as any,
        todoPath: testTodoPath,
        timeframe: 'week',
        includeVelocity: false
      })).rejects.toThrow('Invalid input');
    });

    it('should throw McpAdrError for missing required fields', async () => {
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      await expect(manageTodo({
        operation: 'update_status',
        todoPath: testTodoPath,
        updates: [
          {
            // Missing taskId and status
            notes: 'test'
          } as any
        ]
      })).rejects.toThrow('Invalid input');
    });

    it('should handle file system errors gracefully', async () => {
      const fsError = new Error('Permission denied');
      mockFs.readFile.mockRejectedValue(fsError);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      await expect(manageTodo({
        operation: 'analyze_progress',
        todoPath: testTodoPath,
        timeframe: 'week',
        includeVelocity: true
      })).rejects.toThrow('TODO management failed');
    });
  });

  describe('Task metadata parsing', () => {
    it('should parse task metadata correctly', async () => {
      const complexContent = `# Complex TODO

## Tasks with Metadata

- [x] ✅ Completed task (high priority) [implementation] @john
  > Task completed successfully
- [ ] ⏳ Pending task (medium priority) [testing] @jane
- [ ] 🔄 Active task (critical priority) [documentation]
- [ ] 🚫 Blocked task [bug-fix] @team
`;

      mockFs.readFile.mockResolvedValue(complexContent);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      const result = await manageTodo({
        operation: 'analyze_progress',
        todoPath: testTodoPath,
        timeframe: 'week',
        includeVelocity: true
      });
      
      // Should parse and categorize tasks correctly
      expect(result.content[0].text).toContain('Completion Rate');
      expect(result.content[0].text).toContain('Status Distribution');
    });
  });

  describe('Schema validation', () => {
    it('should validate task status enum correctly', async () => {
      mockFs.readFile.mockResolvedValue('# Test TODO\n');
      mockFs.writeFile.mockResolvedValue(undefined);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      await expect(manageTodo({
        operation: 'add_tasks',
        todoPath: testTodoPath,
        tasks: [
          {
            title: 'Test task',
            status: 'invalid_status' as any
          }
        ]
      })).rejects.toThrow('Invalid input');
    });

    it('should validate priority enum correctly', async () => {
      mockFs.readFile.mockResolvedValue('# Test TODO\n');
      mockFs.writeFile.mockResolvedValue(undefined);
      
      const { manageTodo } = await import('../src/tools/todo-management-tool.js');
      
      await expect(manageTodo({
        operation: 'add_tasks',
        todoPath: testTodoPath,
        tasks: [
          {
            title: 'Test task',
            status: 'pending',
            priority: 'invalid_priority' as any
          }
        ]
      })).rejects.toThrow('Invalid input');
    });
  });
});